plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

configurations {
	asciidoctorExt
}

group = 'com.son'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {

	// MAIL
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// OPEN API
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	// OAUTH2 RESOURCE SERVER
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	// SECURITY
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-data'
	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.jetbrains:annotations:24.0.0'

	// VALIDATE
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// MAPSTRUCT
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'

	// LOMBOK
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

tasks.named('test') {
	useJUnitPlatform()
}
